services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: user-microservice
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=${APP_ENV}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=${DB_SSL_MODE}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_QUEUE_NAME=${RABBITMQ_QUEUE_NAME}
      - RABBITMQ_ENABLE_CONSUMER=${RABBITMQ_ENABLE_CONSUMER}
    volumes:
      - ./configs:/app/configs
      - ./migrations:/app/migrations
      - ./docs:/app/docs
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - user-network
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  postgres:
    image: postgres:14-alpine
    container_name: user-postgres
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - user-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  rabbitmq:
    image: rabbitmq:4-management
    container_name: user-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - user-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 30s
      retries: 15
      start_period: 30s

networks:
  user-network:
    driver: bridge

volumes:
  postgres-data:
